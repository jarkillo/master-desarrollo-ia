#!/bin/bash
# Pre-push hook para validar código antes de push
# Ejecuta: ruff linting, pytest con coverage >= 80%, validación de secretos
# Para saltar este hook: git push --no-verify

set -e  # Exit on first error

echo "🔍 Pre-push hook: Validando código antes de push..."
echo ""

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Función para imprimir errores
print_error() {
    echo -e "${RED}❌ $1${NC}"
}

# Función para imprimir éxito
print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

# Función para imprimir warnings
print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

# 1. Verificar que estamos en el directorio raíz del repo
if [ ! -d ".git" ]; then
    print_error "No estás en el directorio raíz del repositorio"
    exit 1
fi

# 2. Verificar que estamos en un entorno virtual (warning, no bloqueante)
echo "🔍 Verificando entorno virtual..."
if [[ -z "$VIRTUAL_ENV" ]]; then
    print_warning "No estás en un entorno virtual activado"
    print_warning "Recomendado: activa tu .venv antes de hacer push"
    echo ""
fi

# 3. Ejecutar Ruff linting
echo "🔍 Ejecutando Ruff linting..."
if command -v ruff &> /dev/null; then
    if ruff check . --quiet; then
        print_success "Ruff linting pasado"
    else
        print_error "Ruff linting falló"
        echo ""
        echo "💡 Para ver los errores en detalle: ruff check ."
        echo "💡 Para auto-corregir algunos errores: ruff check . --fix"
        echo ""
        echo "Para saltar este hook (NO RECOMENDADO): git push --no-verify"
        exit 1
    fi
else
    print_warning "Ruff no está instalado, saltando linting"
    echo "💡 Instala con: pip install ruff"
fi
echo ""

# 4. Ejecutar tests con coverage
echo "🔍 Ejecutando tests con coverage (mínimo 80%)..."
if command -v pytest &> /dev/null; then
    # Detectar directorios con tests
    test_dirs=()

    # Buscar directorios con tests en las clases más recientes
    if [[ -d "Modulo 4 - Infraestructura y Cloud/Clase 2 - Tu API en un contenedor/tests" ]]; then
        test_dirs+=("Modulo 4 - Infraestructura y Cloud/Clase 2 - Tu API en un contenedor")
    fi
    if [[ -d "Modulo 3 - Seguridad y Buenas Practicas/Clase 7 - Monitoreo con Sentry/tests" ]]; then
        test_dirs+=("Modulo 3 - Seguridad y Buenas Practicas/Clase 7 - Monitoreo con Sentry")
    fi

    if [[ ${#test_dirs[@]} -eq 0 ]]; then
        print_warning "No se encontraron directorios de tests conocidos"
    else
        for dir in "${test_dirs[@]}"; do
            echo "  📂 Testing: $dir"
            cd "$dir"

            # Limpiar cachés
            find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
            find . -type f -name "*.pyc" -delete 2>/dev/null || true

            if pytest --cov=api --cov-report=term-missing --cov-fail-under=80 -q; then
                print_success "Tests pasados con coverage >= 80%: $dir"
            else
                cd - > /dev/null
                print_error "Tests fallaron o coverage < 80%: $dir"
                echo ""
                echo "💡 Para ver detalles: cd '$dir' && pytest -v"
                echo "💡 Para ver coverage: cd '$dir' && pytest --cov=api --cov-report=html"
                echo ""
                echo "Para saltar este hook (NO RECOMENDADO): git push --no-verify"
                exit 1
            fi
            cd - > /dev/null
        done
    fi
else
    print_warning "Pytest no está instalado, saltando tests"
    echo "💡 Instala con: pip install pytest pytest-cov"
fi
echo ""

# 5. Validación de secretos (gitleaks)
echo "🔍 Buscando secretos en el código (gitleaks)..."
if command -v gitleaks &> /dev/null; then
    if gitleaks detect --source . --no-git --quiet; then
        print_success "No se encontraron secretos"
    else
        print_error "¡SECRETOS DETECTADOS EN EL CÓDIGO!"
        echo ""
        echo "💡 Revisa los archivos marcados por gitleaks"
        echo "💡 NO hagas commit de API keys, tokens, contraseñas, etc."
        echo ""
        echo "Para saltar este hook (PELIGROSO): git push --no-verify"
        exit 1
    fi
else
    print_warning "Gitleaks no está instalado, saltando validación de secretos"
    echo "💡 Instala desde: https://github.com/gitleaks/gitleaks"
fi
echo ""

# 6. Todo OK
print_success "Pre-push hook completado exitosamente"
echo ""
echo "✨ Tu código está listo para push"
echo ""

exit 0
