"""
Tool para b√∫squeda de c√≥digo en el repositorio.
"""

import os
import subprocess
from pathlib import Path
from typing import Optional

from langchain.tools import BaseTool
from pydantic import BaseModel, Field


class SearchCodeInput(BaseModel):
    """Schema de input para b√∫squeda de c√≥digo."""

    query: str = Field(
        description="Texto o regex a buscar en el c√≥digo"
    )
    file_pattern: str = Field(
        default="*.py",
        description="Patr√≥n glob para filtrar archivos (e.g., '*.py', 'api/**/*.py')"
    )
    max_results: int = Field(
        default=20,
        ge=1,
        le=100,
        description="M√°ximo de resultados a retornar (1-100)"
    )


class SearchCodeTool(BaseTool):
    """
    Tool para buscar c√≥digo en el repositorio usando grep.

    Caracter√≠sticas:
    - B√∫squeda recursiva en el directorio actual
    - Soporte para patrones glob
    - Limita resultados para no saturar el context window
    - Timeout de seguridad
    """

    name: str = "search_codebase"
    description: str = """
    Busca c√≥digo en el repositorio usando grep.

    √ötil para:
    - Encontrar definiciones de funciones/clases (e.g., "def calculate_total")
    - Buscar imports (e.g., "from fastapi import")
    - Encontrar referencias a variables/constantes
    - Localizar patrones de c√≥digo

    Input:
    - query: Texto a buscar (soporta regex b√°sico)
    - file_pattern: Filtrar por archivos (default: *.py)
    - max_results: M√°ximo de resultados (default: 20)

    Ejemplo: search_codebase(query="class.*BaseModel", file_pattern="api/**/*.py")

    Output: Lista de coincidencias con archivo y n√∫mero de l√≠nea
    """
    args_schema: type[BaseModel] = SearchCodeInput

    def _run(
        self,
        query: str,
        file_pattern: str = "*.py",
        max_results: int = 20
    ) -> str:
        """Ejecuta la b√∫squeda de c√≥digo."""
        try:
            # Obtener PROJECT_ROOT del env o usar directorio actual
            project_root = os.getenv("PROJECT_ROOT", ".")
            project_path = Path(project_root).resolve()

            # Ejecutar grep
            result = subprocess.run(
                [
                    "grep",
                    "-rn",  # Recursivo + n√∫meros de l√≠nea
                    "--include", file_pattern,
                    query,
                    str(project_path)
                ],
                capture_output=True,
                text=True,
                timeout=int(os.getenv("TOOL_TIMEOUT", "30"))
            )

            if result.returncode != 0:
                return f"‚ùå No se encontr√≥ '{query}' en archivos {file_pattern}"

            # Procesar resultados
            lines = result.stdout.strip().split("\n")

            # Limitar resultados
            if len(lines) > max_results:
                truncated = lines[:max_results]
                output = "\n".join(truncated)
                return f"""
‚úÖ Encontradas {len(lines)} coincidencias (mostrando primeras {max_results}):

{output}

... ({len(lines) - max_results} resultados m√°s omitidos)

üí° Refina la b√∫squeda para ver resultados espec√≠ficos.
"""

            output = "\n".join(lines)
            return f"""
‚úÖ Encontradas {len(lines)} coincidencias:

{output}
"""

        except subprocess.TimeoutExpired:
            return "‚ùå Error: B√∫squeda tard√≥ demasiado (timeout). Intenta con un patr√≥n m√°s espec√≠fico."

        except FileNotFoundError:
            return "‚ùå Error: Comando 'grep' no encontrado. Aseg√∫rate de que est√° instalado."

        except Exception as e:
            return f"‚ùå Error al buscar: {str(e)}"

    async def _arun(self, *args, **kwargs) -> str:
        """Versi√≥n async (no implementada, usa la sync)."""
        return self._run(*args, **kwargs)
