"""
Ejercicio 2: Loops y control de flujo en agentes

Objetivo:
Implementar un agente con manejo de estados, retry logic y control de flujo avanzado.

Conceptos:
- State management (estados de tareas)
- Error handling con retry logic
- Feedback loop con verificaci√≥n
- Iteraci√≥n controlada

Caso de uso:
Agente que procesa una lista de tareas de desarrollo (refactoring, testing, documentation)
con reintentos autom√°ticos en caso de fallo.
"""

import os
import time
from dataclasses import dataclass
from enum import Enum
from typing import Any
from anthropic import Anthropic


class TaskState(Enum):
    """Estados posibles de una tarea."""

    PENDING = "pending"
    IN_PROGRESS = "in_progress"
    COMPLETED = "completed"
    FAILED = "failed"
    RETRYING = "retrying"


@dataclass
class Task:
    """Representa una tarea a ejecutar."""

    id: str
    description: str
    state: TaskState = TaskState.PENDING
    attempts: int = 0
    max_attempts: int = 3
    result: str | None = None
    error: str | None = None


class StatefulAgent:
    """
    Agente con manejo de estados y retry logic.

    Implementa:
    - State machine para tareas (pending ‚Üí in_progress ‚Üí completed/failed)
    - Retry logic con backoff exponencial
    - Verificaci√≥n de resultados antes de marcar como completado
    """

    def __init__(self, api_key: str | None = None):
        self.client = Anthropic(api_key=api_key or os.getenv("ANTHROPIC_API_KEY"))
        self.model = "claude-3-5-sonnet-20241022"
        self.tasks: list[Task] = []

    def add_task(self, task_id: str, description: str, max_attempts: int = 3) -> None:
        """A√±ade una tarea a la cola."""
        self.tasks.append(
            Task(id=task_id, description=description, max_attempts=max_attempts)
        )

    def get_task_by_id(self, task_id: str) -> Task | None:
        """Obtiene una tarea por ID."""
        return next((t for t in self.tasks if t.id == task_id), None)

    def transition_state(self, task: Task, new_state: TaskState) -> None:
        """
        Transici√≥n de estado con validaci√≥n.

        Flujo v√°lido:
        PENDING ‚Üí IN_PROGRESS ‚Üí COMPLETED
                             ‚Üí FAILED ‚Üí RETRYING ‚Üí IN_PROGRESS
        """
        valid_transitions = {
            TaskState.PENDING: [TaskState.IN_PROGRESS],
            TaskState.IN_PROGRESS: [TaskState.COMPLETED, TaskState.FAILED],
            TaskState.FAILED: [TaskState.RETRYING],
            TaskState.RETRYING: [TaskState.IN_PROGRESS],
        }

        if new_state not in valid_transitions.get(task.state, []):
            raise ValueError(
                f"Invalid transition: {task.state.value} ‚Üí {new_state.value}"
            )

        print(f"üìä Task {task.id}: {task.state.value} ‚Üí {new_state.value}")
        task.state = new_state

    def verify_result(self, task: Task, result: str) -> tuple[bool, str]:
        """
        Verifica si el resultado de una tarea es v√°lido.

        Usa Claude como verificador (LLM-as-judge pattern).

        Returns:
            (is_valid, feedback)
        """
        verification_prompt = f"""Verifica si este resultado es v√°lido para la tarea:

Tarea: {task.description}
Resultado: {result}

Responde SOLO con:
- "V√ÅLIDO" si el resultado cumple la tarea
- "INV√ÅLIDO: [raz√≥n]" si no cumple, explicando por qu√©

S√© estricto pero justo."""

        response = self.client.messages.create(
            model=self.model,
            max_tokens=500,
            messages=[{"role": "user", "content": verification_prompt}],
        )

        answer = response.content[0].text.strip()

        if answer.startswith("V√ÅLIDO"):
            return True, "Resultado validado correctamente"
        else:
            return False, answer.replace("INV√ÅLIDO:", "").strip()

    def execute_task_with_retry(self, task: Task) -> None:
        """
        Ejecuta una tarea con retry logic.

        Implementa:
        - Backoff exponencial (1s, 2s, 4s, ...)
        - M√°ximo de reintentos configurables
        - Verificaci√≥n de resultados
        """
        while task.attempts < task.max_attempts:
            task.attempts += 1

            # Transition to IN_PROGRESS
            if task.state == TaskState.PENDING:
                self.transition_state(task, TaskState.IN_PROGRESS)
            elif task.state == TaskState.RETRYING:
                self.transition_state(task, TaskState.IN_PROGRESS)

            print(f"\nüîÑ Ejecutando tarea {task.id} (intento {task.attempts}/{task.max_attempts})")

            try:
                # Ejecutar tarea
                result = self._execute_task(task)

                # Verificar resultado
                is_valid, feedback = self.verify_result(task, result)

                if is_valid:
                    # Tarea completada exitosamente
                    task.result = result
                    self.transition_state(task, TaskState.COMPLETED)
                    print(f"‚úÖ Tarea {task.id} completada")
                    return
                else:
                    # Resultado inv√°lido, pero no es un error t√©cnico
                    print(f"‚ö†Ô∏è Resultado inv√°lido: {feedback}")
                    task.error = f"Verificaci√≥n fall√≥: {feedback}"

                    if task.attempts < task.max_attempts:
                        # Retry
                        self.transition_state(task, TaskState.FAILED)
                        self.transition_state(task, TaskState.RETRYING)

                        # Backoff exponencial
                        wait_time = 2 ** (task.attempts - 1)
                        print(f"‚è≥ Esperando {wait_time}s antes de reintentar...")
                        time.sleep(wait_time)
                    else:
                        # M√°ximo de intentos alcanzado
                        self.transition_state(task, TaskState.FAILED)
                        print(f"‚ùå Tarea {task.id} fall√≥ despu√©s de {task.attempts} intentos")
                        return

            except Exception as e:
                # Error t√©cnico durante ejecuci√≥n
                task.error = str(e)
                print(f"üí• Error ejecutando tarea: {e}")

                if task.attempts < task.max_attempts:
                    self.transition_state(task, TaskState.FAILED)
                    self.transition_state(task, TaskState.RETRYING)

                    wait_time = 2 ** (task.attempts - 1)
                    print(f"‚è≥ Esperando {wait_time}s antes de reintentar...")
                    time.sleep(wait_time)
                else:
                    self.transition_state(task, TaskState.FAILED)
                    print(f"‚ùå Tarea {task.id} fall√≥ despu√©s de {task.attempts} intentos")
                    return

    def _execute_task(self, task: Task) -> str:
        """
        Ejecuta la tarea usando Claude.

        En un agente real, esto podr√≠a incluir:
        - Tool calls para ejecutar c√≥digo
        - Verificaci√≥n de tests
        - Generaci√≥n de documentaci√≥n
        """
        response = self.client.messages.create(
            model=self.model,
            max_tokens=2048,
            messages=[
                {
                    "role": "user",
                    "content": f"""Ejecuta esta tarea de desarrollo:

{task.description}

Proporciona el resultado de forma clara y concisa.
Si la tarea requiere c√≥digo, genera el c√≥digo completo.
Si requiere documentaci√≥n, escribe documentaci√≥n clara.""",
                }
            ],
        )

        return response.content[0].text

    def run_all_tasks(self) -> dict[str, Any]:
        """
        Ejecuta todas las tareas pendientes.

        Returns:
            Resumen de ejecuci√≥n con estad√≠sticas
        """
        print("=" * 60)
        print("üöÄ Ejecutando todas las tareas")
        print("=" * 60)

        for task in self.tasks:
            if task.state == TaskState.PENDING:
                self.execute_task_with_retry(task)

        # Generar resumen
        summary = {
            "total": len(self.tasks),
            "completed": sum(1 for t in self.tasks if t.state == TaskState.COMPLETED),
            "failed": sum(1 for t in self.tasks if t.state == TaskState.FAILED),
            "total_attempts": sum(t.attempts for t in self.tasks),
        }

        return summary

    def print_status(self) -> None:
        """Imprime el estado actual de todas las tareas."""
        print("\n" + "=" * 60)
        print("üìä Estado de tareas")
        print("=" * 60)

        for task in self.tasks:
            status_emoji = {
                TaskState.PENDING: "‚è≥",
                TaskState.IN_PROGRESS: "üîÑ",
                TaskState.COMPLETED: "‚úÖ",
                TaskState.FAILED: "‚ùå",
                TaskState.RETRYING: "üîÅ",
            }

            print(f"{status_emoji[task.state]} [{task.id}] {task.description}")
            print(f"   Estado: {task.state.value} | Intentos: {task.attempts}/{task.max_attempts}")

            if task.result:
                print(f"   Resultado: {task.result[:100]}...")
            if task.error:
                print(f"   Error: {task.error}")
            print()


def main() -> None:
    """Ejemplo de uso del agente stateful."""
    print("=== Agente con State Management y Retry Logic ===\n")

    # Verificar API key
    if not os.getenv("ANTHROPIC_API_KEY"):
        print("‚ùå Error: Debes configurar ANTHROPIC_API_KEY")
        return

    # Crear agente
    agent = StatefulAgent()

    # A√±adir tareas
    agent.add_task(
        "refactor-1",
        "Refactoriza esta funci√≥n para usar list comprehension:\n\n"
        "def get_evens(nums):\n"
        "    result = []\n"
        "    for n in nums:\n"
        "        if n % 2 == 0:\n"
        "            result.append(n)\n"
        "    return result",
        max_attempts=2,
    )

    agent.add_task(
        "test-1",
        "Escribe tests unitarios con pytest para una funci√≥n que calcula el factorial de un n√∫mero",
        max_attempts=3,
    )

    agent.add_task(
        "doc-1",
        "Escribe documentaci√≥n en formato docstring para una funci√≥n que valida emails usando regex",
        max_attempts=2,
    )

    # Ejecutar todas las tareas
    summary = agent.run_all_tasks()

    # Mostrar estado final
    agent.print_status()

    # Mostrar resumen
    print("=" * 60)
    print("üìà Resumen de ejecuci√≥n")
    print("=" * 60)
    print(f"Total de tareas: {summary['total']}")
    print(f"Completadas: {summary['completed']}")
    print(f"Fallidas: {summary['failed']}")
    print(f"Intentos totales: {summary['total_attempts']}")
    print(f"Tasa de √©xito: {summary['completed'] / summary['total'] * 100:.1f}%")


if __name__ == "__main__":
    main()


# ================================
# EJERCICIO PARA EL ESTUDIANTE
# ================================

"""
1. Ejecuta el agente y observa:
   - ¬øCu√°ntos intentos necesit√≥ cada tarea?
   - ¬øHubo alguna tarea que fall√≥ la verificaci√≥n?
   - ¬øCu√°nto tiempo tom√≥ el backoff exponencial?

2. Modifica el c√≥digo para:
   a) A√±adir un estado CANCELLED (usuario puede cancelar tareas)
   b) Implementar prioridades (high, medium, low) en las tareas
   c) Persistir el estado de tareas en un archivo JSON

3. Crea tu propia tarea personalizada y prueba el retry logic

4. DESAF√çO: Implementa estas mejoras:
   - Circuit breaker: Si 3 tareas fallan seguidas, parar el agente
   - M√©tricas: Tiempo promedio por tarea, tasa de √©xito por tipo
   - Notificaciones: Enviar email cuando una tarea falla definitivamente

Preguntas de reflexi√≥n:
- ¬øCu√°ndo es apropiado el backoff exponencial vs backoff lineal?
- ¬øQu√© otras verificaciones podr√≠as a√±adir adem√°s de LLM-as-judge?
- ¬øC√≥mo escalar√≠as esto para 1000+ tareas concurrentes?
"""
