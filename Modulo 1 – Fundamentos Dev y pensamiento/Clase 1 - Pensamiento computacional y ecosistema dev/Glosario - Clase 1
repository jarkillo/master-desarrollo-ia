# üìñ Glosario ‚Äì Clase 1

**Pensamiento computacional**

Forma de razonar como un programador: descomponer problemas, encontrar patrones, abstraer lo irrelevante y definir algoritmos (secuencia de pasos).

**CLI (Command Line Interface)**

Aplicaci√≥n que se maneja desde la terminal, escribiendo comandos en lugar de usar botones gr√°ficos.

**`sys.argv`**

Lista en Python que contiene los argumentos pasados al ejecutar un script.

Ejemplo: `python tareas.py listar` ‚Üí `sys.argv = ["tareas.py", "listar"]`.

**Argumento**

Dato que pasas a un programa desde la l√≠nea de comandos. Sirve para indicar qu√© quieres que haga.

Ej: `listar`, `agregar`.

**Esqueleto**

Versi√≥n m√≠nima de un programa que no resuelve el problema completo, pero ya marca la estructura b√°sica.

**JSON (JavaScript Object Notation)**

Formato de texto ligero para almacenar y compartir datos. En este caso, lo usamos para guardar la lista de tareas.

**Persistencia**

Capacidad de un programa de guardar informaci√≥n en disco (por ejemplo en un archivo `.json`) para que siga disponible al cerrar el programa.

**`argparse`**

M√≥dulo de Python que facilita la gesti√≥n de argumentos y comandos en una CLI. Es la versi√≥n ‚Äúpro‚Äù de `sys.argv`.

**Historia de usuario**

Forma simple de expresar un requisito desde la perspectiva del usuario:

*‚ÄúComo [usuario], quiero [acci√≥n] para [beneficio]‚Äù.*

**Gherkin**

Lenguaje estructurado para describir comportamientos de software mediante escenarios:

`Given` (dado), `When` (cuando), `Then` (entonces).

**TDD (Test Driven Development)**

Metodolog√≠a de desarrollo basada en escribir primero los tests, luego el c√≥digo m√≠nimo para que pasen, y finalmente refactorizar. Ciclo: **Red ‚Üí Green ‚Üí Refactor**.