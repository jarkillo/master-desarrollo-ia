name: CI - Tests con cobertura y linters por clase

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      API_KEY: ${{ secrets.API_KEY }}

    strategy:
      fail-fast: false
      matrix:
        class_dir:
          # Módulo 2 - Ingeniería y Arquitectura (5 clases)
          - "Modulo 2 – Ingeniería y Arquitectura/Clase 2 - Principios SOLID y paradigmas de programacion"
          - "Modulo 2 – Ingeniería y Arquitectura/Clase 3 - Arquitectura limpia"
          - "Modulo 2 – Ingeniería y Arquitectura/Clase 4 - Open_Closed y Dependency Inversion"
          - "Modulo 2 – Ingeniería y Arquitectura/Clase 5 - Integracion y pruebas de arquitectura"
          - "Modulo 2 – Ingeniería y Arquitectura/Clase 6 - Integracion continua y control de calidad"
          # Módulo 3 - Calidad y Seguridad (7 clases)
          - "Modulo 3 – Calidad y Seguridad/Clase 1 - El codigo que se defiende solo"
          - "Modulo 3 – Calidad y Seguridad/Clase 2 - Seguridad básica en tu API"
          - "Modulo 3 – Calidad y Seguridad/Clase 3 - Auditoria continua y defensa inteligente con IA"
          - "Modulo 3 – Calidad y Seguridad/Clase 4 - Seguridad avanzada y autenticación con JWT"
          - "Modulo 3 – Calidad y Seguridad/Clase 5 – Defensa activa y pipelines seguros"
          - "Modulo 3 – Calidad y Seguridad/Clase 6 – Defensa completa y CICD inteligente"
          - "Modulo 3 – Calidad y Seguridad/Clase 7 - Clase Bonus – Observabilidad y alertas con Sentry"
          # Módulo 4 - Infraestructura y Cloud (2 clases)
          - "Modulo 4 - Infraestructura y Cloud/Clase 1 - Del código local al entorno vivo"
          - "Modulo 4 - Infraestructura y Cloud/Clase 2 - Tu API en un contenedor"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
          pip install ruff flake8

      - name: Run tests with coverage
        working-directory: ${{ matrix.class_dir }}
        run: |
          # Limpieza de cachés
          find . -type d -name "__pycache__" -exec rm -rf {} +
          find . -type f -name "*.pyc" -delete

          # Ejecutar pytest con cobertura y fallar si la cobertura es menor a 80%
          pytest --cov=api --cov-report=term-missing --cov-fail-under=80

      - name: Ruff (fast linter)
        working-directory: ${{ matrix.class_dir }}
        run: |
          # Ruff check — rápido, moderno. Saldrá con código != 0 si hay problemas.
          ruff check api/

      - name: Auditoría de seguridad
        working-directory: ${{ matrix.class_dir }}
        run: |
            pip install bandit
            bandit -r api/ -ll

      - name: Check if infra/check_env.py exists
        id: check_env_file
        working-directory: ${{ matrix.class_dir }}
        run: |
          if [ -f "infra/check_env.py" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Validar variables de entorno
        if: steps.check_env_file.outputs.exists == 'true'
        working-directory: ${{ matrix.class_dir }}
        run: python infra/check_env.py
        
        
     # - name: Flake8 (reglas clásicas)
     #   working-directory: ${{ matrix.class_dir }}
     #  run: |
          # Flake8 — reglas adicionales/legacy que quieras mantener
          # flake8 api/

  # Job separado para Safety (escanea todo el repo, no por clase)
  safety:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Auditoría de dependencias (Safety)
        uses: pyupio/safety-action@v1
        with:
          api-key: ${{ secrets.SAFETY_API_KEY }}

  # Job separado para Gitleaks (escanea todo el repo, no por clase)
  gitleaks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Necesario para gitleaks (historial completo)

      - name: Secret scanning
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
